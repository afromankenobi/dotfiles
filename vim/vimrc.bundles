let g:has_async = v:version >= 800 || has('nvim') 
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" build composer for vim-markdown-composer
" requires Rust
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction

call plug#begin('~/.vim/bundle')
  Plug 'airblade/vim-gitgutter'
  Plug 'ap/vim-css-color'
  Plug 'arrufat/vala.vim'
  Plug 'elixir-lang/vim-elixir'
  Plug 'euclio/vim-markdown-composer'
  Plug 'fatih/vim-go'
  Plug 'freitass/todo.txt-vim'
  Plug 'jeffkreeftmeijer/vim-dim'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'
  Plug 'mattn/emmet-vim'
  Plug 'mhinz/vim-startify'
  Plug 'pangloss/vim-javascript'
  Plug 'pbrisbin/vim-mkdir'
  Plug 'scrooloose/nerdtree'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-dadbod'
  Plug 'kristijanhusak/vim-dadbod-completion'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-vinegar'
  Plug 'vim-ruby/vim-ruby'
  Plug 'vim-scripts/tComment'
  Plug 'codota/tabnine-vim'

  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif

  if g:has_async
    Plug 'dense-analysis/ale'
  endif
call plug#end()

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command! -nargs=1 UnPlug call s:UnPlug(<args>)

" config plugins here
let g:deoplete#enable_at_startup = 1

" autostart markdown composer off
let g:markdown_composer_open_browser = 0

" use FZF as ctrlp
nnoremap <C-p> :FZF<CR>

" Use goyo and limelight together
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" remap tab and shifttab
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\   'ruby': ['rubocop', 'trim_whitespace', 'remove_trailing_lines']
\}

let g:ale_ruby_rubocop_executable = '/Users/jorgevargassilva/.rbenv/versions/2.7.2/bin/rubocop'

" Ale config
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1

" Nerdtree toggle
map <C-n> :NERDTreeToggle<CR>

" startify
set viminfo='100,n$HOME/.vim/files/info/viminfo

" Color scheme
silent! colorscheme dim

" vim-ruby config
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 1
let g:rubycomplete_use_bundler = 1
" let g:rubycomplete_load_paths = ["/path/to/code", "./lib/example"]

" deoplete tabnine client
" call deoplete#custom#var('tabnine', {
" \ 'line_limit': 250,
" \ 'max_num_results': 10,
" \ })

" Dadbod
" For built in omnifunc
autocmd FileType sql setlocal omnifunc=vim_dadbod_completion#omni
