let g:has_async = v:version >= 800 || has('nvim')

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" build composer for vim-markdown-composer
" requires Rust
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release --locked
    else
      !cargo build --release --locked --no-default-features --features json-rpc
    endif
  endif
endfunction

call plug#begin('~/.vim/bundle')
  Plug 'airblade/vim-gitgutter'
  Plug 'andymass/vim-matchup'
  Plug 'ap/vim-css-color'
  Plug 'elixir-lang/vim-elixir'
  Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
  Plug 'jeffkreeftmeijer/vim-dim'
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'
  Plug 'kristijanhusak/vim-dadbod-completion'
  Plug 'kristijanhusak/vim-dadbod-ui'
  Plug 'mattn/emmet-vim'
  Plug 'mhinz/vim-startify'
  Plug 'nanotee/zoxide.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'pbrisbin/vim-mkdir'
  Plug 'rafamadriz/friendly-snippets'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-dadbod'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-vinegar'
  Plug 'vim-ruby/vim-ruby'
  if has('nvim')
    Plug 'HiPhish/rainbow-delimiters.nvim'
    Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'}
    Plug 'MunifTanjim/nui.nvim'
    Plug 'RRethy/vim-illuminate'
    Plug 'SmiteshP/nvim-navbuddy'
    Plug 'SmiteshP/nvim-navic'
    Plug 'Tastyep/structlog.nvim'
    Plug 'VonHeikemen/lsp-zero.nvim', {'branch': 'v3.x'}
    Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
    Plug 'danilamihailov/beacon.nvim'
    Plug 'folke/neodev.nvim'
    Plug 'folke/trouble.nvim'
    Plug 'folke/which-key.nvim'
    Plug 'github/copilot.vim'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-vsnip'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/vim-vsnip'
    Plug 'hrsh7th/vim-vsnip-integ'
    Plug 'lewis6991/gitsigns.nvim'
    Plug 'lukas-reineke/indent-blankline.nvim'
    Plug 'mfussenegger/nvim-dap'
    Plug 'neovim/nvim-lspconfig'
    Plug 'numToStr/Comment.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'nvim-neotest/nvim-nio'
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.6' }
    Plug 'nvim-tree/nvim-tree.lua'
    Plug 'nvim-tree/nvim-web-devicons'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'nvimtools/none-ls.nvim'
    Plug 'petertriho/cmp-git'
    Plug 'rcarriga/nvim-dap-ui'
    Plug 'rcarriga/nvim-notify'
    Plug 'stevearc/conform.nvim'
    Plug 'tamago324/nlsp-settings.nvim'
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'williamboman/mason.nvim'
    Plug 'windwp/nvim-autopairs'
  endif
call plug#end()

if filereadable(expand("~/.nvimrc.lua")) && has('nvim')
  source ~/.nvimrc.lua
endif

""" config plugins here

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command! -nargs=1 UnPlug call s:UnPlug(<args>)

if has('nvim')
  let g:markdown_composer_open_browser = 0 " autostart markdown composer off
endif

" Use goyo and limelight together
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" remap tab and shifttab
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

" Color scheme
colorscheme dim

" vim-ruby config
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 1
let g:rubycomplete_use_bundler = 1

" Startify
" returns all modified files of the current git repo
" `2>/dev/null` makes the command fail quietly, so that when we are not
" in a git repo, the list will be empty
function! s:gitModified()
  let files = systemlist('git ls-files -m 2>/dev/null')
  return map(files, "{'line': v:val, 'path': v:val}")
endfunction

" same as above, but show untracked files, honouring .gitignore
function! s:gitUntracked()
  let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
  return map(files, "{'line': v:val, 'path': v:val}")
endfunction

let g:startify_lists = [
        \ { 'type': 'files',     'header': ['   MRU']            },
        \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
        \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
        \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
        \ { 'type': 'commands',  'header': ['   Commands']       },
        \ ]

" Beacon config
let g:beacon_enable = 1
"  g:beacon_ignore_buffers = [\w*git*\w]
"  g:beacon_ignore_filetypes = ['fzf']
nmap n n:Beacon<cr>
nmap N N:Beacon<cr>
nmap * *:Beacon<cr>
nmap # #:Beacon<cr>

" disable on inactive windows
augroup MyCursorLineGroup
    autocmd!
    au WinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup end

nnoremap <silent>K :Lspsaga hover_doc<CR>
inoremap <silent> <C-k> <Cmd>Lspsaga signature_help<CR>
nnoremap <silent> gh <Cmd>Lspsaga lsp_finder<CR>
nnoremap <silent> <C-j> :Lspsaga diagnostic_jump_next<CR>

set completeopt=menu,menuone,noselect

let g:dbs = {
\  'dev': 'postgres://postgres@localhost:5432/risks_development'
\ }

autocmd FileType sql setlocal omnifunc=vim_dadbod_completion#omni

