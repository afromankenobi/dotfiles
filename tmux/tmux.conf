#------------------------------------------------------------------------------
# COLOR DEFINITIONS
#------------------------------------------------------------------------------
# Define colors with meaningful names instead of cryptic codes
color_black="colour0"
color_dark_gray="colour236"
color_gray="colour241"
color_light_gray="colour245"
color_white="colour255"
color_orange="colour208"
color_blue="colour105"
color_cyan="colour43"
color_green="colour76"
color_yellow="colour220"
color_red="colour196"
color_purple="colour147"

# Assign colors to functional roles
color_bg="$color_black"                # Background color
color_fg="$color_white"                # Foreground/text color
color_active="$color_orange"           # Active items (current window/pane)
color_inactive="$color_gray"           # Inactive items
color_session="$color_blue"            # Session indicator
color_time="$color_cyan"               # Time display
color_separator="$color_light_gray"    # Separator in status bar
color_ruby="$color_red"                # Ruby version color
color_rails="$color_purple"            # Rails version color

#------------------------------------------------------------------------------
# GENERAL SETTINGS
#------------------------------------------------------------------------------
# Terminal and color support
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*-256color:Tc"

# Mouse support
set -g mouse on

# History limit
set -g history-limit 1000000

# Prevent automatic window renaming
set -g allow-rename off

# Allow passthrough for special escape sequences
set-option -g allow-passthrough on

# Enable focus events for better editor integration
set-option -g focus-events on

# No escape delay for better vim/neovim experience
set -sg escape-time 0

# Start window and pane indexing from 1 (not 0)
set -g base-index 1
set-window-option -g pane-base-index 1

# Renumber windows sequentially after closing
set -g renumber-windows on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# Status bar updates
set -g status-interval 60

# Disable suspend (Ctrl+Z)
unbind-key C-z

#------------------------------------------------------------------------------
# KEYBINDINGS
#------------------------------------------------------------------------------
# Vim style movement between panes
setw -g mode-keys vi
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Copy mode
bind ` copy-mode

# Cross-platform copy to system clipboard
# Detect OS and use appropriate clipboard command
if-shell "uname | grep -q Darwin" {
    # macOS
    bind -Tcopy-mode-vi v send -X begin-selection
    bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel 'pbcopy'
    bind -Tcopy-mode-vi C-v send -X rectangle-toggle
} {
    # Linux - check for xclip or xsel
    if-shell "command -v xclip > /dev/null" {
        bind -Tcopy-mode-vi v send -X begin-selection
        bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'
        bind -Tcopy-mode-vi C-v send -X rectangle-toggle
    }
    if-shell "command -v xsel > /dev/null" {
        bind -Tcopy-mode-vi v send -X begin-selection
        bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel 'xsel -ib'
        bind -Tcopy-mode-vi C-v send -X rectangle-toggle
    }
}

# Paste
bind + paste-buffer

# Open new panes/windows in the same directory
bind 'Â´' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Clear screen and history (like Clear in iTerm2)
bind K send-keys -R \; clear-history

# Create new session
bind S command-prompt -p "New Session:" "new-session -A -s '%%'"

# Reload configuration
bind R source-file ~/.tmux.conf \; display-message " Config reloaded.."

#------------------------------------------------------------------------------
# APPEARANCE
#------------------------------------------------------------------------------
# Status bar base styles
set -g status-bg default
set -g status-fg "$color_fg"
set -g status-right-style bold

# Pane borders
set -g pane-border-style fg="$color_inactive"
set -g pane-active-border-style fg="$color_active"

# Pane number colors
set -g display-panes-active-colour "$color_active"
set -g display-panes-colour "$color_inactive"

# Window styles
set-option -g status-style bg="$color_bg"
set-window-option -g window-status-style bg="$color_bg",dim
set-window-option -g window-status-current-style bold,underscore
set-window-option -g window-status-current-style fg="$color_active",bg="$color_dark_gray",bright

# Window format (#I: number; #W name)
set-window-option -g window-status-format "#I #W"
set-window-option -g window-status-current-format "#I #W"

# Turn off aggressive resize for better compatibility
set-window-option -g aggressive-resize off

#------------------------------------------------------------------------------
# STATUS BAR CONTENT
#------------------------------------------------------------------------------
# Left status - session name
set -g status-left-length 200
set-option -g status-left " #[fg=$color_session][#S] "

# Right status - time, ruby version, rails version
set -g status-right-length 200
tm_separator="#[fg=$color_separator]|"
tm_time="#[fg=$color_time]%a %d %H:%M"

# Only show Ruby/Rails info if commands exist
if-shell "command -v ruby > /dev/null" {
    set -g @ruby_version="#[fg=$color_ruby]Ruby #(ruby -v 2>/dev/null | cut -c 6-10 || echo \"N/A\")"
} {
    set -g @ruby_version="#[fg=$color_ruby]Ruby N/A"
}

if-shell "command -v rails > /dev/null" {
    set -g @rails_version="#[fg=$color_rails]#(rails -v 2>/dev/null | cut -c 1-11 || echo \"N/A\")"
} {
    set -g @rails_version="#[fg=$color_rails]Rails N/A"
}

set-option -g status-right "$tm_time $tm_separator #{@ruby_version} $tm_separator #{@rails_version} "